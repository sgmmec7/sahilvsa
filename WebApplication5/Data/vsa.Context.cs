//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication5.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class vsaTestEntities : DbContext
    {
        public vsaTestEntities()
            : base("name=vsaTestEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblTest> tblTests { get; set; }
    
        public virtual int spDeleteData(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteData", idParameter);
        }
    
        public virtual int spInsertData(Nullable<System.DateTime> receivedDate, Nullable<System.DateTime> sentDate, string name, string claimsAdministrator, string employer, string description, string request, Nullable<System.DateTime> dueDate)
        {
            var receivedDateParameter = receivedDate.HasValue ?
                new ObjectParameter("ReceivedDate", receivedDate) :
                new ObjectParameter("ReceivedDate", typeof(System.DateTime));
    
            var sentDateParameter = sentDate.HasValue ?
                new ObjectParameter("SentDate", sentDate) :
                new ObjectParameter("SentDate", typeof(System.DateTime));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var claimsAdministratorParameter = claimsAdministrator != null ?
                new ObjectParameter("ClaimsAdministrator", claimsAdministrator) :
                new ObjectParameter("ClaimsAdministrator", typeof(string));
    
            var employerParameter = employer != null ?
                new ObjectParameter("Employer", employer) :
                new ObjectParameter("Employer", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var requestParameter = request != null ?
                new ObjectParameter("Request", request) :
                new ObjectParameter("Request", typeof(string));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertData", receivedDateParameter, sentDateParameter, nameParameter, claimsAdministratorParameter, employerParameter, descriptionParameter, requestParameter, dueDateParameter);
        }
    
        public virtual ObjectResult<tblTest> spGetDataByDates(Nullable<System.DateTime> receiveDate, Nullable<System.DateTime> sentDate, Nullable<System.DateTime> dueDate)
        {
            var receiveDateParameter = receiveDate.HasValue ?
                new ObjectParameter("ReceiveDate", receiveDate) :
                new ObjectParameter("ReceiveDate", typeof(System.DateTime));
    
            var sentDateParameter = sentDate.HasValue ?
                new ObjectParameter("SentDate", sentDate) :
                new ObjectParameter("SentDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblTest>("spGetDataByDates", receiveDateParameter, sentDateParameter, dueDateParameter);
        }
    
        public virtual ObjectResult<tblTest> spGetDataByDates(Nullable<System.DateTime> receiveDate, Nullable<System.DateTime> sentDate, Nullable<System.DateTime> dueDate, MergeOption mergeOption)
        {
            var receiveDateParameter = receiveDate.HasValue ?
                new ObjectParameter("ReceiveDate", receiveDate) :
                new ObjectParameter("ReceiveDate", typeof(System.DateTime));
    
            var sentDateParameter = sentDate.HasValue ?
                new ObjectParameter("SentDate", sentDate) :
                new ObjectParameter("SentDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblTest>("spGetDataByDates", mergeOption, receiveDateParameter, sentDateParameter, dueDateParameter);
        }
    }
}
